// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/auditmon/ent/eventnameautofill"
	"github.com/lbrictson/auditmon/ent/predicate"
)

// EventNameAutofillQuery is the builder for querying EventNameAutofill entities.
type EventNameAutofillQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.EventNameAutofill
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EventNameAutofillQuery builder.
func (enaq *EventNameAutofillQuery) Where(ps ...predicate.EventNameAutofill) *EventNameAutofillQuery {
	enaq.predicates = append(enaq.predicates, ps...)
	return enaq
}

// Limit adds a limit step to the query.
func (enaq *EventNameAutofillQuery) Limit(limit int) *EventNameAutofillQuery {
	enaq.limit = &limit
	return enaq
}

// Offset adds an offset step to the query.
func (enaq *EventNameAutofillQuery) Offset(offset int) *EventNameAutofillQuery {
	enaq.offset = &offset
	return enaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (enaq *EventNameAutofillQuery) Unique(unique bool) *EventNameAutofillQuery {
	enaq.unique = &unique
	return enaq
}

// Order adds an order step to the query.
func (enaq *EventNameAutofillQuery) Order(o ...OrderFunc) *EventNameAutofillQuery {
	enaq.order = append(enaq.order, o...)
	return enaq
}

// First returns the first EventNameAutofill entity from the query.
// Returns a *NotFoundError when no EventNameAutofill was found.
func (enaq *EventNameAutofillQuery) First(ctx context.Context) (*EventNameAutofill, error) {
	nodes, err := enaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{eventnameautofill.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (enaq *EventNameAutofillQuery) FirstX(ctx context.Context) *EventNameAutofill {
	node, err := enaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EventNameAutofill ID from the query.
// Returns a *NotFoundError when no EventNameAutofill ID was found.
func (enaq *EventNameAutofillQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = enaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{eventnameautofill.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (enaq *EventNameAutofillQuery) FirstIDX(ctx context.Context) int {
	id, err := enaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EventNameAutofill entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EventNameAutofill entity is found.
// Returns a *NotFoundError when no EventNameAutofill entities are found.
func (enaq *EventNameAutofillQuery) Only(ctx context.Context) (*EventNameAutofill, error) {
	nodes, err := enaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{eventnameautofill.Label}
	default:
		return nil, &NotSingularError{eventnameautofill.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (enaq *EventNameAutofillQuery) OnlyX(ctx context.Context) *EventNameAutofill {
	node, err := enaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EventNameAutofill ID in the query.
// Returns a *NotSingularError when more than one EventNameAutofill ID is found.
// Returns a *NotFoundError when no entities are found.
func (enaq *EventNameAutofillQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = enaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{eventnameautofill.Label}
	default:
		err = &NotSingularError{eventnameautofill.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (enaq *EventNameAutofillQuery) OnlyIDX(ctx context.Context) int {
	id, err := enaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EventNameAutofills.
func (enaq *EventNameAutofillQuery) All(ctx context.Context) ([]*EventNameAutofill, error) {
	if err := enaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return enaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (enaq *EventNameAutofillQuery) AllX(ctx context.Context) []*EventNameAutofill {
	nodes, err := enaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EventNameAutofill IDs.
func (enaq *EventNameAutofillQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := enaq.Select(eventnameautofill.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (enaq *EventNameAutofillQuery) IDsX(ctx context.Context) []int {
	ids, err := enaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (enaq *EventNameAutofillQuery) Count(ctx context.Context) (int, error) {
	if err := enaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return enaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (enaq *EventNameAutofillQuery) CountX(ctx context.Context) int {
	count, err := enaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (enaq *EventNameAutofillQuery) Exist(ctx context.Context) (bool, error) {
	if err := enaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return enaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (enaq *EventNameAutofillQuery) ExistX(ctx context.Context) bool {
	exist, err := enaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EventNameAutofillQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (enaq *EventNameAutofillQuery) Clone() *EventNameAutofillQuery {
	if enaq == nil {
		return nil
	}
	return &EventNameAutofillQuery{
		config:     enaq.config,
		limit:      enaq.limit,
		offset:     enaq.offset,
		order:      append([]OrderFunc{}, enaq.order...),
		predicates: append([]predicate.EventNameAutofill{}, enaq.predicates...),
		// clone intermediate query.
		sql:    enaq.sql.Clone(),
		path:   enaq.path,
		unique: enaq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		EventName string `json:"eventName,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EventNameAutofill.Query().
//		GroupBy(eventnameautofill.FieldEventName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (enaq *EventNameAutofillQuery) GroupBy(field string, fields ...string) *EventNameAutofillGroupBy {
	group := &EventNameAutofillGroupBy{config: enaq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := enaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return enaq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		EventName string `json:"eventName,omitempty"`
//	}
//
//	client.EventNameAutofill.Query().
//		Select(eventnameautofill.FieldEventName).
//		Scan(ctx, &v)
//
func (enaq *EventNameAutofillQuery) Select(fields ...string) *EventNameAutofillSelect {
	enaq.fields = append(enaq.fields, fields...)
	return &EventNameAutofillSelect{EventNameAutofillQuery: enaq}
}

func (enaq *EventNameAutofillQuery) prepareQuery(ctx context.Context) error {
	for _, f := range enaq.fields {
		if !eventnameautofill.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if enaq.path != nil {
		prev, err := enaq.path(ctx)
		if err != nil {
			return err
		}
		enaq.sql = prev
	}
	return nil
}

func (enaq *EventNameAutofillQuery) sqlAll(ctx context.Context) ([]*EventNameAutofill, error) {
	var (
		nodes = []*EventNameAutofill{}
		_spec = enaq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &EventNameAutofill{config: enaq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, enaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (enaq *EventNameAutofillQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := enaq.querySpec()
	_spec.Node.Columns = enaq.fields
	if len(enaq.fields) > 0 {
		_spec.Unique = enaq.unique != nil && *enaq.unique
	}
	return sqlgraph.CountNodes(ctx, enaq.driver, _spec)
}

func (enaq *EventNameAutofillQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := enaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (enaq *EventNameAutofillQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   eventnameautofill.Table,
			Columns: eventnameautofill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: eventnameautofill.FieldID,
			},
		},
		From:   enaq.sql,
		Unique: true,
	}
	if unique := enaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := enaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventnameautofill.FieldID)
		for i := range fields {
			if fields[i] != eventnameautofill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := enaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := enaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := enaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := enaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (enaq *EventNameAutofillQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(enaq.driver.Dialect())
	t1 := builder.Table(eventnameautofill.Table)
	columns := enaq.fields
	if len(columns) == 0 {
		columns = eventnameautofill.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if enaq.sql != nil {
		selector = enaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if enaq.unique != nil && *enaq.unique {
		selector.Distinct()
	}
	for _, p := range enaq.predicates {
		p(selector)
	}
	for _, p := range enaq.order {
		p(selector)
	}
	if offset := enaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := enaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EventNameAutofillGroupBy is the group-by builder for EventNameAutofill entities.
type EventNameAutofillGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (enagb *EventNameAutofillGroupBy) Aggregate(fns ...AggregateFunc) *EventNameAutofillGroupBy {
	enagb.fns = append(enagb.fns, fns...)
	return enagb
}

// Scan applies the group-by query and scans the result into the given value.
func (enagb *EventNameAutofillGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := enagb.path(ctx)
	if err != nil {
		return err
	}
	enagb.sql = query
	return enagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (enagb *EventNameAutofillGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := enagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (enagb *EventNameAutofillGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(enagb.fields) > 1 {
		return nil, errors.New("ent: EventNameAutofillGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := enagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (enagb *EventNameAutofillGroupBy) StringsX(ctx context.Context) []string {
	v, err := enagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (enagb *EventNameAutofillGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = enagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{eventnameautofill.Label}
	default:
		err = fmt.Errorf("ent: EventNameAutofillGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (enagb *EventNameAutofillGroupBy) StringX(ctx context.Context) string {
	v, err := enagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (enagb *EventNameAutofillGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(enagb.fields) > 1 {
		return nil, errors.New("ent: EventNameAutofillGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := enagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (enagb *EventNameAutofillGroupBy) IntsX(ctx context.Context) []int {
	v, err := enagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (enagb *EventNameAutofillGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = enagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{eventnameautofill.Label}
	default:
		err = fmt.Errorf("ent: EventNameAutofillGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (enagb *EventNameAutofillGroupBy) IntX(ctx context.Context) int {
	v, err := enagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (enagb *EventNameAutofillGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(enagb.fields) > 1 {
		return nil, errors.New("ent: EventNameAutofillGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := enagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (enagb *EventNameAutofillGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := enagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (enagb *EventNameAutofillGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = enagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{eventnameautofill.Label}
	default:
		err = fmt.Errorf("ent: EventNameAutofillGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (enagb *EventNameAutofillGroupBy) Float64X(ctx context.Context) float64 {
	v, err := enagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (enagb *EventNameAutofillGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(enagb.fields) > 1 {
		return nil, errors.New("ent: EventNameAutofillGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := enagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (enagb *EventNameAutofillGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := enagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (enagb *EventNameAutofillGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = enagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{eventnameautofill.Label}
	default:
		err = fmt.Errorf("ent: EventNameAutofillGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (enagb *EventNameAutofillGroupBy) BoolX(ctx context.Context) bool {
	v, err := enagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (enagb *EventNameAutofillGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range enagb.fields {
		if !eventnameautofill.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := enagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := enagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (enagb *EventNameAutofillGroupBy) sqlQuery() *sql.Selector {
	selector := enagb.sql.Select()
	aggregation := make([]string, 0, len(enagb.fns))
	for _, fn := range enagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(enagb.fields)+len(enagb.fns))
		for _, f := range enagb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(enagb.fields...)...)
}

// EventNameAutofillSelect is the builder for selecting fields of EventNameAutofill entities.
type EventNameAutofillSelect struct {
	*EventNameAutofillQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (enas *EventNameAutofillSelect) Scan(ctx context.Context, v interface{}) error {
	if err := enas.prepareQuery(ctx); err != nil {
		return err
	}
	enas.sql = enas.EventNameAutofillQuery.sqlQuery(ctx)
	return enas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (enas *EventNameAutofillSelect) ScanX(ctx context.Context, v interface{}) {
	if err := enas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (enas *EventNameAutofillSelect) Strings(ctx context.Context) ([]string, error) {
	if len(enas.fields) > 1 {
		return nil, errors.New("ent: EventNameAutofillSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := enas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (enas *EventNameAutofillSelect) StringsX(ctx context.Context) []string {
	v, err := enas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (enas *EventNameAutofillSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = enas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{eventnameautofill.Label}
	default:
		err = fmt.Errorf("ent: EventNameAutofillSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (enas *EventNameAutofillSelect) StringX(ctx context.Context) string {
	v, err := enas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (enas *EventNameAutofillSelect) Ints(ctx context.Context) ([]int, error) {
	if len(enas.fields) > 1 {
		return nil, errors.New("ent: EventNameAutofillSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := enas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (enas *EventNameAutofillSelect) IntsX(ctx context.Context) []int {
	v, err := enas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (enas *EventNameAutofillSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = enas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{eventnameautofill.Label}
	default:
		err = fmt.Errorf("ent: EventNameAutofillSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (enas *EventNameAutofillSelect) IntX(ctx context.Context) int {
	v, err := enas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (enas *EventNameAutofillSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(enas.fields) > 1 {
		return nil, errors.New("ent: EventNameAutofillSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := enas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (enas *EventNameAutofillSelect) Float64sX(ctx context.Context) []float64 {
	v, err := enas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (enas *EventNameAutofillSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = enas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{eventnameautofill.Label}
	default:
		err = fmt.Errorf("ent: EventNameAutofillSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (enas *EventNameAutofillSelect) Float64X(ctx context.Context) float64 {
	v, err := enas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (enas *EventNameAutofillSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(enas.fields) > 1 {
		return nil, errors.New("ent: EventNameAutofillSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := enas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (enas *EventNameAutofillSelect) BoolsX(ctx context.Context) []bool {
	v, err := enas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (enas *EventNameAutofillSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = enas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{eventnameautofill.Label}
	default:
		err = fmt.Errorf("ent: EventNameAutofillSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (enas *EventNameAutofillSelect) BoolX(ctx context.Context) bool {
	v, err := enas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (enas *EventNameAutofillSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := enas.sql.Query()
	if err := enas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
