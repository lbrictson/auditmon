// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/auditmon/ent/predicate"
	"github.com/lbrictson/auditmon/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetHashedPassword sets the "hashed_password" field.
func (uu *UserUpdate) SetHashedPassword(s string) *UserUpdate {
	uu.mutation.SetHashedPassword(s)
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(s string) *UserUpdate {
	uu.mutation.SetRole(s)
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetPasswordLastSetAt sets the "password_last_set_at" field.
func (uu *UserUpdate) SetPasswordLastSetAt(t time.Time) *UserUpdate {
	uu.mutation.SetPasswordLastSetAt(t)
	return uu
}

// SetNillablePasswordLastSetAt sets the "password_last_set_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordLastSetAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetPasswordLastSetAt(*t)
	}
	return uu
}

// SetForcePasswordChange sets the "force_password_change" field.
func (uu *UserUpdate) SetForcePasswordChange(b bool) *UserUpdate {
	uu.mutation.SetForcePasswordChange(b)
	return uu
}

// SetNillableForcePasswordChange sets the "force_password_change" field if the given value is not nil.
func (uu *UserUpdate) SetNillableForcePasswordChange(b *bool) *UserUpdate {
	if b != nil {
		uu.SetForcePasswordChange(*b)
	}
	return uu
}

// SetLastLogin sets the "last_login" field.
func (uu *UserUpdate) SetLastLogin(t time.Time) *UserUpdate {
	uu.mutation.SetLastLogin(t)
	return uu
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLogin(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLogin(*t)
	}
	return uu
}

// SetFailedLogins sets the "failed_logins" field.
func (uu *UserUpdate) SetFailedLogins(i int) *UserUpdate {
	uu.mutation.ResetFailedLogins()
	uu.mutation.SetFailedLogins(i)
	return uu
}

// SetNillableFailedLogins sets the "failed_logins" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFailedLogins(i *int) *UserUpdate {
	if i != nil {
		uu.SetFailedLogins(*i)
	}
	return uu
}

// AddFailedLogins adds i to the "failed_logins" field.
func (uu *UserUpdate) AddFailedLogins(i int) *UserUpdate {
	uu.mutation.AddFailedLogins(i)
	return uu
}

// SetLocked sets the "locked" field.
func (uu *UserUpdate) SetLocked(b bool) *UserUpdate {
	uu.mutation.SetLocked(b)
	return uu
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLocked(b *bool) *UserUpdate {
	if b != nil {
		uu.SetLocked(*b)
	}
	return uu
}

// SetLockedUntil sets the "locked_until" field.
func (uu *UserUpdate) SetLockedUntil(t time.Time) *UserUpdate {
	uu.mutation.SetLockedUntil(t)
	return uu
}

// SetNillableLockedUntil sets the "locked_until" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLockedUntil(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLockedUntil(*t)
	}
	return uu
}

// SetMfaSecret sets the "mfa_secret" field.
func (uu *UserUpdate) SetMfaSecret(s string) *UserUpdate {
	uu.mutation.SetMfaSecret(s)
	return uu
}

// SetNillableMfaSecret sets the "mfa_secret" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMfaSecret(s *string) *UserUpdate {
	if s != nil {
		uu.SetMfaSecret(*s)
	}
	return uu
}

// ClearMfaSecret clears the value of the "mfa_secret" field.
func (uu *UserUpdate) ClearMfaSecret() *UserUpdate {
	uu.mutation.ClearMfaSecret()
	return uu
}

// SetMfaSetupCompleted sets the "mfa_setup_completed" field.
func (uu *UserUpdate) SetMfaSetupCompleted(b bool) *UserUpdate {
	uu.mutation.SetMfaSetupCompleted(b)
	return uu
}

// SetNillableMfaSetupCompleted sets the "mfa_setup_completed" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMfaSetupCompleted(b *bool) *UserUpdate {
	if b != nil {
		uu.SetMfaSetupCompleted(*b)
	}
	return uu
}

// SetRecentPasswords sets the "recent_passwords" field.
func (uu *UserUpdate) SetRecentPasswords(s []string) *UserUpdate {
	uu.mutation.SetRecentPasswords(s)
	return uu
}

// ClearRecentPasswords clears the value of the "recent_passwords" field.
func (uu *UserUpdate) ClearRecentPasswords() *UserUpdate {
	uu.mutation.ClearRecentPasswords()
	return uu
}

// SetMfaImage sets the "mfa_image" field.
func (uu *UserUpdate) SetMfaImage(b []byte) *UserUpdate {
	uu.mutation.SetMfaImage(b)
	return uu
}

// ClearMfaImage clears the value of the "mfa_image" field.
func (uu *UserUpdate) ClearMfaImage() *UserUpdate {
	uu.mutation.ClearMfaImage()
	return uu
}

// SetTimezone sets the "timezone" field.
func (uu *UserUpdate) SetTimezone(s string) *UserUpdate {
	uu.mutation.SetTimezone(s)
	return uu
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTimezone(s *string) *UserUpdate {
	if s != nil {
		uu.SetTimezone(*s)
	}
	return uu
}

// ClearTimezone clears the value of the "timezone" field.
func (uu *UserUpdate) ClearTimezone() *UserUpdate {
	uu.mutation.ClearTimezone()
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.HashedPassword(); ok {
		if err := user.HashedPasswordValidator(v); err != nil {
			return &ValidationError{Name: "hashed_password", err: fmt.Errorf(`ent: validator failed for field "User.hashed_password": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUsername,
		})
	}
	if value, ok := uu.mutation.HashedPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldHashedPassword,
		})
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRole,
		})
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uu.mutation.PasswordLastSetAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldPasswordLastSetAt,
		})
	}
	if value, ok := uu.mutation.ForcePasswordChange(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldForcePasswordChange,
		})
	}
	if value, ok := uu.mutation.LastLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldLastLogin,
		})
	}
	if value, ok := uu.mutation.FailedLogins(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldFailedLogins,
		})
	}
	if value, ok := uu.mutation.AddedFailedLogins(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldFailedLogins,
		})
	}
	if value, ok := uu.mutation.Locked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldLocked,
		})
	}
	if value, ok := uu.mutation.LockedUntil(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldLockedUntil,
		})
	}
	if value, ok := uu.mutation.MfaSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldMfaSecret,
		})
	}
	if uu.mutation.MfaSecretCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldMfaSecret,
		})
	}
	if value, ok := uu.mutation.MfaSetupCompleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldMfaSetupCompleted,
		})
	}
	if value, ok := uu.mutation.RecentPasswords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: user.FieldRecentPasswords,
		})
	}
	if uu.mutation.RecentPasswordsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: user.FieldRecentPasswords,
		})
	}
	if value, ok := uu.mutation.MfaImage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: user.FieldMfaImage,
		})
	}
	if uu.mutation.MfaImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: user.FieldMfaImage,
		})
	}
	if value, ok := uu.mutation.Timezone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldTimezone,
		})
	}
	if uu.mutation.TimezoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldTimezone,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetHashedPassword sets the "hashed_password" field.
func (uuo *UserUpdateOne) SetHashedPassword(s string) *UserUpdateOne {
	uuo.mutation.SetHashedPassword(s)
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(s string) *UserUpdateOne {
	uuo.mutation.SetRole(s)
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetPasswordLastSetAt sets the "password_last_set_at" field.
func (uuo *UserUpdateOne) SetPasswordLastSetAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetPasswordLastSetAt(t)
	return uuo
}

// SetNillablePasswordLastSetAt sets the "password_last_set_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordLastSetAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetPasswordLastSetAt(*t)
	}
	return uuo
}

// SetForcePasswordChange sets the "force_password_change" field.
func (uuo *UserUpdateOne) SetForcePasswordChange(b bool) *UserUpdateOne {
	uuo.mutation.SetForcePasswordChange(b)
	return uuo
}

// SetNillableForcePasswordChange sets the "force_password_change" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableForcePasswordChange(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetForcePasswordChange(*b)
	}
	return uuo
}

// SetLastLogin sets the "last_login" field.
func (uuo *UserUpdateOne) SetLastLogin(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLogin(t)
	return uuo
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLogin(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLogin(*t)
	}
	return uuo
}

// SetFailedLogins sets the "failed_logins" field.
func (uuo *UserUpdateOne) SetFailedLogins(i int) *UserUpdateOne {
	uuo.mutation.ResetFailedLogins()
	uuo.mutation.SetFailedLogins(i)
	return uuo
}

// SetNillableFailedLogins sets the "failed_logins" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFailedLogins(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetFailedLogins(*i)
	}
	return uuo
}

// AddFailedLogins adds i to the "failed_logins" field.
func (uuo *UserUpdateOne) AddFailedLogins(i int) *UserUpdateOne {
	uuo.mutation.AddFailedLogins(i)
	return uuo
}

// SetLocked sets the "locked" field.
func (uuo *UserUpdateOne) SetLocked(b bool) *UserUpdateOne {
	uuo.mutation.SetLocked(b)
	return uuo
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLocked(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetLocked(*b)
	}
	return uuo
}

// SetLockedUntil sets the "locked_until" field.
func (uuo *UserUpdateOne) SetLockedUntil(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLockedUntil(t)
	return uuo
}

// SetNillableLockedUntil sets the "locked_until" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLockedUntil(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLockedUntil(*t)
	}
	return uuo
}

// SetMfaSecret sets the "mfa_secret" field.
func (uuo *UserUpdateOne) SetMfaSecret(s string) *UserUpdateOne {
	uuo.mutation.SetMfaSecret(s)
	return uuo
}

// SetNillableMfaSecret sets the "mfa_secret" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMfaSecret(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetMfaSecret(*s)
	}
	return uuo
}

// ClearMfaSecret clears the value of the "mfa_secret" field.
func (uuo *UserUpdateOne) ClearMfaSecret() *UserUpdateOne {
	uuo.mutation.ClearMfaSecret()
	return uuo
}

// SetMfaSetupCompleted sets the "mfa_setup_completed" field.
func (uuo *UserUpdateOne) SetMfaSetupCompleted(b bool) *UserUpdateOne {
	uuo.mutation.SetMfaSetupCompleted(b)
	return uuo
}

// SetNillableMfaSetupCompleted sets the "mfa_setup_completed" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMfaSetupCompleted(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetMfaSetupCompleted(*b)
	}
	return uuo
}

// SetRecentPasswords sets the "recent_passwords" field.
func (uuo *UserUpdateOne) SetRecentPasswords(s []string) *UserUpdateOne {
	uuo.mutation.SetRecentPasswords(s)
	return uuo
}

// ClearRecentPasswords clears the value of the "recent_passwords" field.
func (uuo *UserUpdateOne) ClearRecentPasswords() *UserUpdateOne {
	uuo.mutation.ClearRecentPasswords()
	return uuo
}

// SetMfaImage sets the "mfa_image" field.
func (uuo *UserUpdateOne) SetMfaImage(b []byte) *UserUpdateOne {
	uuo.mutation.SetMfaImage(b)
	return uuo
}

// ClearMfaImage clears the value of the "mfa_image" field.
func (uuo *UserUpdateOne) ClearMfaImage() *UserUpdateOne {
	uuo.mutation.ClearMfaImage()
	return uuo
}

// SetTimezone sets the "timezone" field.
func (uuo *UserUpdateOne) SetTimezone(s string) *UserUpdateOne {
	uuo.mutation.SetTimezone(s)
	return uuo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTimezone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTimezone(*s)
	}
	return uuo
}

// ClearTimezone clears the value of the "timezone" field.
func (uuo *UserUpdateOne) ClearTimezone() *UserUpdateOne {
	uuo.mutation.ClearTimezone()
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.HashedPassword(); ok {
		if err := user.HashedPasswordValidator(v); err != nil {
			return &ValidationError{Name: "hashed_password", err: fmt.Errorf(`ent: validator failed for field "User.hashed_password": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUsername,
		})
	}
	if value, ok := uuo.mutation.HashedPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldHashedPassword,
		})
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRole,
		})
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uuo.mutation.PasswordLastSetAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldPasswordLastSetAt,
		})
	}
	if value, ok := uuo.mutation.ForcePasswordChange(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldForcePasswordChange,
		})
	}
	if value, ok := uuo.mutation.LastLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldLastLogin,
		})
	}
	if value, ok := uuo.mutation.FailedLogins(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldFailedLogins,
		})
	}
	if value, ok := uuo.mutation.AddedFailedLogins(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldFailedLogins,
		})
	}
	if value, ok := uuo.mutation.Locked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldLocked,
		})
	}
	if value, ok := uuo.mutation.LockedUntil(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldLockedUntil,
		})
	}
	if value, ok := uuo.mutation.MfaSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldMfaSecret,
		})
	}
	if uuo.mutation.MfaSecretCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldMfaSecret,
		})
	}
	if value, ok := uuo.mutation.MfaSetupCompleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldMfaSetupCompleted,
		})
	}
	if value, ok := uuo.mutation.RecentPasswords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: user.FieldRecentPasswords,
		})
	}
	if uuo.mutation.RecentPasswordsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: user.FieldRecentPasswords,
		})
	}
	if value, ok := uuo.mutation.MfaImage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: user.FieldMfaImage,
		})
	}
	if uuo.mutation.MfaImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: user.FieldMfaImage,
		})
	}
	if value, ok := uuo.mutation.Timezone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldTimezone,
		})
	}
	if uuo.mutation.TimezoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldTimezone,
		})
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
