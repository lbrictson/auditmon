// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lbrictson/auditmon/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// HashedPassword holds the value of the "hashed_password" field.
	HashedPassword string `json:"hashed_password,omitempty"`
	// Role holds the value of the "role" field.
	Role string `json:"role,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// PasswordLastSetAt holds the value of the "password_last_set_at" field.
	PasswordLastSetAt time.Time `json:"password_last_set_at,omitempty"`
	// ForcePasswordChange holds the value of the "force_password_change" field.
	ForcePasswordChange bool `json:"force_password_change,omitempty"`
	// LastLogin holds the value of the "last_login" field.
	LastLogin time.Time `json:"last_login,omitempty"`
	// FailedLogins holds the value of the "failed_logins" field.
	FailedLogins int `json:"failed_logins,omitempty"`
	// Locked holds the value of the "locked" field.
	Locked bool `json:"locked,omitempty"`
	// LockedUntil holds the value of the "locked_until" field.
	LockedUntil time.Time `json:"locked_until,omitempty"`
	// MfaSecret holds the value of the "mfa_secret" field.
	MfaSecret string `json:"mfa_secret,omitempty"`
	// MfaSetupCompleted holds the value of the "mfa_setup_completed" field.
	MfaSetupCompleted bool `json:"mfa_setup_completed,omitempty"`
	// RecentPasswords holds the value of the "recent_passwords" field.
	RecentPasswords []string `json:"recent_passwords,omitempty"`
	// MfaImage holds the value of the "mfa_image" field.
	MfaImage []byte `json:"mfa_image,omitempty"`
	// Timezone holds the value of the "timezone" field.
	Timezone string `json:"timezone,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldRecentPasswords, user.FieldMfaImage:
			values[i] = new([]byte)
		case user.FieldForcePasswordChange, user.FieldLocked, user.FieldMfaSetupCompleted:
			values[i] = new(sql.NullBool)
		case user.FieldFailedLogins:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldHashedPassword, user.FieldRole, user.FieldMfaSecret, user.FieldTimezone:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldPasswordLastSetAt, user.FieldLastLogin, user.FieldLockedUntil:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldHashedPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hashed_password", values[i])
			} else if value.Valid {
				u.HashedPassword = value.String
			}
		case user.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				u.Role = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldPasswordLastSetAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field password_last_set_at", values[i])
			} else if value.Valid {
				u.PasswordLastSetAt = value.Time
			}
		case user.FieldForcePasswordChange:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field force_password_change", values[i])
			} else if value.Valid {
				u.ForcePasswordChange = value.Bool
			}
		case user.FieldLastLogin:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login", values[i])
			} else if value.Valid {
				u.LastLogin = value.Time
			}
		case user.FieldFailedLogins:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field failed_logins", values[i])
			} else if value.Valid {
				u.FailedLogins = int(value.Int64)
			}
		case user.FieldLocked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field locked", values[i])
			} else if value.Valid {
				u.Locked = value.Bool
			}
		case user.FieldLockedUntil:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field locked_until", values[i])
			} else if value.Valid {
				u.LockedUntil = value.Time
			}
		case user.FieldMfaSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mfa_secret", values[i])
			} else if value.Valid {
				u.MfaSecret = value.String
			}
		case user.FieldMfaSetupCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field mfa_setup_completed", values[i])
			} else if value.Valid {
				u.MfaSetupCompleted = value.Bool
			}
		case user.FieldRecentPasswords:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field recent_passwords", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.RecentPasswords); err != nil {
					return fmt.Errorf("unmarshal field recent_passwords: %w", err)
				}
			}
		case user.FieldMfaImage:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field mfa_image", values[i])
			} else if value != nil {
				u.MfaImage = *value
			}
		case user.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				u.Timezone = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", username=")
	builder.WriteString(u.Username)
	builder.WriteString(", hashed_password=")
	builder.WriteString(u.HashedPassword)
	builder.WriteString(", role=")
	builder.WriteString(u.Role)
	builder.WriteString(", created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", password_last_set_at=")
	builder.WriteString(u.PasswordLastSetAt.Format(time.ANSIC))
	builder.WriteString(", force_password_change=")
	builder.WriteString(fmt.Sprintf("%v", u.ForcePasswordChange))
	builder.WriteString(", last_login=")
	builder.WriteString(u.LastLogin.Format(time.ANSIC))
	builder.WriteString(", failed_logins=")
	builder.WriteString(fmt.Sprintf("%v", u.FailedLogins))
	builder.WriteString(", locked=")
	builder.WriteString(fmt.Sprintf("%v", u.Locked))
	builder.WriteString(", locked_until=")
	builder.WriteString(u.LockedUntil.Format(time.ANSIC))
	builder.WriteString(", mfa_secret=")
	builder.WriteString(u.MfaSecret)
	builder.WriteString(", mfa_setup_completed=")
	builder.WriteString(fmt.Sprintf("%v", u.MfaSetupCompleted))
	builder.WriteString(", recent_passwords=")
	builder.WriteString(fmt.Sprintf("%v", u.RecentPasswords))
	builder.WriteString(", mfa_image=")
	builder.WriteString(fmt.Sprintf("%v", u.MfaImage))
	builder.WriteString(", timezone=")
	builder.WriteString(u.Timezone)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
