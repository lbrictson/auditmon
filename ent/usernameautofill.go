// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/auditmon/ent/usernameautofill"
)

// UsernameAutofill is the model entity for the UsernameAutofill schema.
type UsernameAutofill struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UsernameAutofill) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case usernameautofill.FieldID:
			values[i] = new(sql.NullInt64)
		case usernameautofill.FieldUsername:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UsernameAutofill", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UsernameAutofill fields.
func (ua *UsernameAutofill) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usernameautofill.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ua.ID = int(value.Int64)
		case usernameautofill.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				ua.Username = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UsernameAutofill.
// Note that you need to call UsernameAutofill.Unwrap() before calling this method if this UsernameAutofill
// was returned from a transaction, and the transaction was committed or rolled back.
func (ua *UsernameAutofill) Update() *UsernameAutofillUpdateOne {
	return (&UsernameAutofillClient{config: ua.config}).UpdateOne(ua)
}

// Unwrap unwraps the UsernameAutofill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ua *UsernameAutofill) Unwrap() *UsernameAutofill {
	tx, ok := ua.config.driver.(*txDriver)
	if !ok {
		panic("ent: UsernameAutofill is not a transactional entity")
	}
	ua.config.driver = tx.drv
	return ua
}

// String implements the fmt.Stringer.
func (ua *UsernameAutofill) String() string {
	var builder strings.Builder
	builder.WriteString("UsernameAutofill(")
	builder.WriteString(fmt.Sprintf("id=%v", ua.ID))
	builder.WriteString(", username=")
	builder.WriteString(ua.Username)
	builder.WriteByte(')')
	return builder.String()
}

// UsernameAutofills is a parsable slice of UsernameAutofill.
type UsernameAutofills []*UsernameAutofill

func (ua UsernameAutofills) config(cfg config) {
	for _i := range ua {
		ua[_i].config = cfg
	}
}
