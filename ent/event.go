// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lbrictson/auditmon/ent/event"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// EventTime holds the value of the "event_time" field.
	EventTime time.Time `json:"event_time,omitempty"`
	// EventName holds the value of the "event_name" field.
	EventName string `json:"event_name,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Resource holds the value of the "resource" field.
	Resource string `json:"resource,omitempty"`
	// SourceIP holds the value of the "source_ip" field.
	SourceIP string `json:"source_ip,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID string `json:"request_id,omitempty"`
	// ReadOnly holds the value of the "read_only" field.
	ReadOnly bool `json:"read_only,omitempty"`
	// EventData holds the value of the "event_data" field.
	EventData map[string]interface{} `json:"event_data,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldEventData:
			values[i] = new([]byte)
		case event.FieldReadOnly:
			values[i] = new(sql.NullBool)
		case event.FieldEventName, event.FieldUsername, event.FieldResource, event.FieldSourceIP, event.FieldRequestID:
			values[i] = new(sql.NullString)
		case event.FieldEventTime:
			values[i] = new(sql.NullTime)
		case event.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Event", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case event.FieldEventTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field event_time", values[i])
			} else if value.Valid {
				e.EventTime = value.Time
			}
		case event.FieldEventName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_name", values[i])
			} else if value.Valid {
				e.EventName = value.String
			}
		case event.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				e.Username = value.String
			}
		case event.FieldResource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource", values[i])
			} else if value.Valid {
				e.Resource = value.String
			}
		case event.FieldSourceIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_ip", values[i])
			} else if value.Valid {
				e.SourceIP = value.String
			}
		case event.FieldRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				e.RequestID = value.String
			}
		case event.FieldReadOnly:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field read_only", values[i])
			} else if value.Valid {
				e.ReadOnly = value.Bool
			}
		case event.FieldEventData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field event_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.EventData); err != nil {
					return fmt.Errorf("unmarshal field event_data: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return (&EventClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", event_time=")
	builder.WriteString(e.EventTime.Format(time.ANSIC))
	builder.WriteString(", event_name=")
	builder.WriteString(e.EventName)
	builder.WriteString(", username=")
	builder.WriteString(e.Username)
	builder.WriteString(", resource=")
	builder.WriteString(e.Resource)
	builder.WriteString(", source_ip=")
	builder.WriteString(e.SourceIP)
	builder.WriteString(", request_id=")
	builder.WriteString(e.RequestID)
	builder.WriteString(", read_only=")
	builder.WriteString(fmt.Sprintf("%v", e.ReadOnly))
	builder.WriteString(", event_data=")
	builder.WriteString(fmt.Sprintf("%v", e.EventData))
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event

func (e Events) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
