// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lbrictson/auditmon/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetHashedPassword sets the "hashed_password" field.
func (uc *UserCreate) SetHashedPassword(s string) *UserCreate {
	uc.mutation.SetHashedPassword(s)
	return uc
}

// SetRole sets the "role" field.
func (uc *UserCreate) SetRole(s string) *UserCreate {
	uc.mutation.SetRole(s)
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetPasswordLastSetAt sets the "password_last_set_at" field.
func (uc *UserCreate) SetPasswordLastSetAt(t time.Time) *UserCreate {
	uc.mutation.SetPasswordLastSetAt(t)
	return uc
}

// SetNillablePasswordLastSetAt sets the "password_last_set_at" field if the given value is not nil.
func (uc *UserCreate) SetNillablePasswordLastSetAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetPasswordLastSetAt(*t)
	}
	return uc
}

// SetForcePasswordChange sets the "force_password_change" field.
func (uc *UserCreate) SetForcePasswordChange(b bool) *UserCreate {
	uc.mutation.SetForcePasswordChange(b)
	return uc
}

// SetNillableForcePasswordChange sets the "force_password_change" field if the given value is not nil.
func (uc *UserCreate) SetNillableForcePasswordChange(b *bool) *UserCreate {
	if b != nil {
		uc.SetForcePasswordChange(*b)
	}
	return uc
}

// SetLastLogin sets the "last_login" field.
func (uc *UserCreate) SetLastLogin(t time.Time) *UserCreate {
	uc.mutation.SetLastLogin(t)
	return uc
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastLogin(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastLogin(*t)
	}
	return uc
}

// SetFailedLogins sets the "failed_logins" field.
func (uc *UserCreate) SetFailedLogins(i int) *UserCreate {
	uc.mutation.SetFailedLogins(i)
	return uc
}

// SetNillableFailedLogins sets the "failed_logins" field if the given value is not nil.
func (uc *UserCreate) SetNillableFailedLogins(i *int) *UserCreate {
	if i != nil {
		uc.SetFailedLogins(*i)
	}
	return uc
}

// SetLocked sets the "locked" field.
func (uc *UserCreate) SetLocked(b bool) *UserCreate {
	uc.mutation.SetLocked(b)
	return uc
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (uc *UserCreate) SetNillableLocked(b *bool) *UserCreate {
	if b != nil {
		uc.SetLocked(*b)
	}
	return uc
}

// SetLockedUntil sets the "locked_until" field.
func (uc *UserCreate) SetLockedUntil(t time.Time) *UserCreate {
	uc.mutation.SetLockedUntil(t)
	return uc
}

// SetNillableLockedUntil sets the "locked_until" field if the given value is not nil.
func (uc *UserCreate) SetNillableLockedUntil(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLockedUntil(*t)
	}
	return uc
}

// SetMfaSecret sets the "mfa_secret" field.
func (uc *UserCreate) SetMfaSecret(s string) *UserCreate {
	uc.mutation.SetMfaSecret(s)
	return uc
}

// SetNillableMfaSecret sets the "mfa_secret" field if the given value is not nil.
func (uc *UserCreate) SetNillableMfaSecret(s *string) *UserCreate {
	if s != nil {
		uc.SetMfaSecret(*s)
	}
	return uc
}

// SetMfaSetupCompleted sets the "mfa_setup_completed" field.
func (uc *UserCreate) SetMfaSetupCompleted(b bool) *UserCreate {
	uc.mutation.SetMfaSetupCompleted(b)
	return uc
}

// SetNillableMfaSetupCompleted sets the "mfa_setup_completed" field if the given value is not nil.
func (uc *UserCreate) SetNillableMfaSetupCompleted(b *bool) *UserCreate {
	if b != nil {
		uc.SetMfaSetupCompleted(*b)
	}
	return uc
}

// SetRecentPasswords sets the "recent_passwords" field.
func (uc *UserCreate) SetRecentPasswords(s []string) *UserCreate {
	uc.mutation.SetRecentPasswords(s)
	return uc
}

// SetMfaImage sets the "mfa_image" field.
func (uc *UserCreate) SetMfaImage(b []byte) *UserCreate {
	uc.mutation.SetMfaImage(b)
	return uc
}

// SetTimezone sets the "timezone" field.
func (uc *UserCreate) SetTimezone(s string) *UserCreate {
	uc.mutation.SetTimezone(s)
	return uc
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (uc *UserCreate) SetNillableTimezone(s *string) *UserCreate {
	if s != nil {
		uc.SetTimezone(*s)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(u uuid.UUID) *UserCreate {
	uc.mutation.SetID(u)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetID(*u)
	}
	return uc
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	uc.defaults()
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			if node, err = uc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			if uc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.PasswordLastSetAt(); !ok {
		v := user.DefaultPasswordLastSetAt
		uc.mutation.SetPasswordLastSetAt(v)
	}
	if _, ok := uc.mutation.ForcePasswordChange(); !ok {
		v := user.DefaultForcePasswordChange
		uc.mutation.SetForcePasswordChange(v)
	}
	if _, ok := uc.mutation.LastLogin(); !ok {
		v := user.DefaultLastLogin
		uc.mutation.SetLastLogin(v)
	}
	if _, ok := uc.mutation.FailedLogins(); !ok {
		v := user.DefaultFailedLogins
		uc.mutation.SetFailedLogins(v)
	}
	if _, ok := uc.mutation.Locked(); !ok {
		v := user.DefaultLocked
		uc.mutation.SetLocked(v)
	}
	if _, ok := uc.mutation.LockedUntil(); !ok {
		v := user.DefaultLockedUntil
		uc.mutation.SetLockedUntil(v)
	}
	if _, ok := uc.mutation.MfaSetupCompleted(); !ok {
		v := user.DefaultMfaSetupCompleted
		uc.mutation.SetMfaSetupCompleted(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if _, ok := uc.mutation.HashedPassword(); !ok {
		return &ValidationError{Name: "hashed_password", err: errors.New(`ent: missing required field "User.hashed_password"`)}
	}
	if v, ok := uc.mutation.HashedPassword(); ok {
		if err := user.HashedPasswordValidator(v); err != nil {
			return &ValidationError{Name: "hashed_password", err: fmt.Errorf(`ent: validator failed for field "User.hashed_password": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "User.role"`)}
	}
	if v, ok := uc.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.PasswordLastSetAt(); !ok {
		return &ValidationError{Name: "password_last_set_at", err: errors.New(`ent: missing required field "User.password_last_set_at"`)}
	}
	if _, ok := uc.mutation.ForcePasswordChange(); !ok {
		return &ValidationError{Name: "force_password_change", err: errors.New(`ent: missing required field "User.force_password_change"`)}
	}
	if _, ok := uc.mutation.LastLogin(); !ok {
		return &ValidationError{Name: "last_login", err: errors.New(`ent: missing required field "User.last_login"`)}
	}
	if _, ok := uc.mutation.FailedLogins(); !ok {
		return &ValidationError{Name: "failed_logins", err: errors.New(`ent: missing required field "User.failed_logins"`)}
	}
	if _, ok := uc.mutation.Locked(); !ok {
		return &ValidationError{Name: "locked", err: errors.New(`ent: missing required field "User.locked"`)}
	}
	if _, ok := uc.mutation.LockedUntil(); !ok {
		return &ValidationError{Name: "locked_until", err: errors.New(`ent: missing required field "User.locked_until"`)}
	}
	if _, ok := uc.mutation.MfaSetupCompleted(); !ok {
		return &ValidationError{Name: "mfa_setup_completed", err: errors.New(`ent: missing required field "User.mfa_setup_completed"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		}
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := uc.mutation.HashedPassword(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldHashedPassword,
		})
		_node.HashedPassword = value
	}
	if value, ok := uc.mutation.Role(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRole,
		})
		_node.Role = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.PasswordLastSetAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldPasswordLastSetAt,
		})
		_node.PasswordLastSetAt = value
	}
	if value, ok := uc.mutation.ForcePasswordChange(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldForcePasswordChange,
		})
		_node.ForcePasswordChange = value
	}
	if value, ok := uc.mutation.LastLogin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldLastLogin,
		})
		_node.LastLogin = value
	}
	if value, ok := uc.mutation.FailedLogins(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldFailedLogins,
		})
		_node.FailedLogins = value
	}
	if value, ok := uc.mutation.Locked(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldLocked,
		})
		_node.Locked = value
	}
	if value, ok := uc.mutation.LockedUntil(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldLockedUntil,
		})
		_node.LockedUntil = value
	}
	if value, ok := uc.mutation.MfaSecret(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldMfaSecret,
		})
		_node.MfaSecret = value
	}
	if value, ok := uc.mutation.MfaSetupCompleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldMfaSetupCompleted,
		})
		_node.MfaSetupCompleted = value
	}
	if value, ok := uc.mutation.RecentPasswords(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: user.FieldRecentPasswords,
		})
		_node.RecentPasswords = value
	}
	if value, ok := uc.mutation.MfaImage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: user.FieldMfaImage,
		})
		_node.MfaImage = value
	}
	if value, ok := uc.mutation.Timezone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldTimezone,
		})
		_node.Timezone = value
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
