// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/lbrictson/auditmon/ent/event"
	"github.com/lbrictson/auditmon/ent/schema"
	"github.com/lbrictson/auditmon/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	eventFields := schema.Event{}.Fields()
	_ = eventFields
	// eventDescEventTime is the schema descriptor for event_time field.
	eventDescEventTime := eventFields[1].Descriptor()
	// event.DefaultEventTime holds the default value on creation for the event_time field.
	event.DefaultEventTime = eventDescEventTime.Default.(time.Time)
	// eventDescResource is the schema descriptor for resource field.
	eventDescResource := eventFields[4].Descriptor()
	// event.DefaultResource holds the default value on creation for the resource field.
	event.DefaultResource = eventDescResource.Default.(string)
	// eventDescSourceIP is the schema descriptor for source_ip field.
	eventDescSourceIP := eventFields[5].Descriptor()
	// event.DefaultSourceIP holds the default value on creation for the source_ip field.
	event.DefaultSourceIP = eventDescSourceIP.Default.(string)
	// eventDescRequestID is the schema descriptor for request_id field.
	eventDescRequestID := eventFields[6].Descriptor()
	// event.DefaultRequestID holds the default value on creation for the request_id field.
	event.DefaultRequestID = eventDescRequestID.Default.(string)
	// eventDescReadOnly is the schema descriptor for read_only field.
	eventDescReadOnly := eventFields[7].Descriptor()
	// event.DefaultReadOnly holds the default value on creation for the read_only field.
	event.DefaultReadOnly = eventDescReadOnly.Default.(bool)
	// eventDescEventSource is the schema descriptor for event_source field.
	eventDescEventSource := eventFields[9].Descriptor()
	// event.DefaultEventSource holds the default value on creation for the event_source field.
	event.DefaultEventSource = eventDescEventSource.Default.(string)
	// eventDescID is the schema descriptor for id field.
	eventDescID := eventFields[0].Descriptor()
	// event.DefaultID holds the default value on creation for the id field.
	event.DefaultID = eventDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescHashedPassword is the schema descriptor for hashed_password field.
	userDescHashedPassword := userFields[2].Descriptor()
	// user.HashedPasswordValidator is a validator for the "hashed_password" field. It is called by the builders before save.
	user.HashedPasswordValidator = userDescHashedPassword.Validators[0].(func(string) error)
	// userDescRole is the schema descriptor for role field.
	userDescRole := userFields[3].Descriptor()
	// user.RoleValidator is a validator for the "role" field. It is called by the builders before save.
	user.RoleValidator = userDescRole.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[4].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(time.Time)
	// userDescPasswordLastSetAt is the schema descriptor for password_last_set_at field.
	userDescPasswordLastSetAt := userFields[5].Descriptor()
	// user.DefaultPasswordLastSetAt holds the default value on creation for the password_last_set_at field.
	user.DefaultPasswordLastSetAt = userDescPasswordLastSetAt.Default.(time.Time)
	// userDescForcePasswordChange is the schema descriptor for force_password_change field.
	userDescForcePasswordChange := userFields[6].Descriptor()
	// user.DefaultForcePasswordChange holds the default value on creation for the force_password_change field.
	user.DefaultForcePasswordChange = userDescForcePasswordChange.Default.(bool)
	// userDescLastLogin is the schema descriptor for last_login field.
	userDescLastLogin := userFields[7].Descriptor()
	// user.DefaultLastLogin holds the default value on creation for the last_login field.
	user.DefaultLastLogin = userDescLastLogin.Default.(time.Time)
	// userDescFailedLogins is the schema descriptor for failed_logins field.
	userDescFailedLogins := userFields[8].Descriptor()
	// user.DefaultFailedLogins holds the default value on creation for the failed_logins field.
	user.DefaultFailedLogins = userDescFailedLogins.Default.(int)
	// userDescLocked is the schema descriptor for locked field.
	userDescLocked := userFields[9].Descriptor()
	// user.DefaultLocked holds the default value on creation for the locked field.
	user.DefaultLocked = userDescLocked.Default.(bool)
	// userDescLockedUntil is the schema descriptor for locked_until field.
	userDescLockedUntil := userFields[10].Descriptor()
	// user.DefaultLockedUntil holds the default value on creation for the locked_until field.
	user.DefaultLockedUntil = userDescLockedUntil.Default.(time.Time)
	// userDescMfaSetupCompleted is the schema descriptor for mfa_setup_completed field.
	userDescMfaSetupCompleted := userFields[12].Descriptor()
	// user.DefaultMfaSetupCompleted holds the default value on creation for the mfa_setup_completed field.
	user.DefaultMfaSetupCompleted = userDescMfaSetupCompleted.Default.(bool)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
